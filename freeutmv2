#!/bin/bash

# freeutm - Unified Threat Management for Linux Systems
# Version: 2.0.0
# License: GPLv3

VERSION="2.0.0"
CONFIG_DIR="/etc/freeutm"
LOG_DIR="/var/log/freeutm"
THREADS_DIR="$CONFIG_DIR/threads"
THREAT_FEEDS_DIR="$CONFIG_DIR/threat_feeds"
LOCK_FILE="/var/lock/freeutm.lock"
SURICATA_RULES_DIR="/etc/suricata/rules"

# Ensure script is run as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" >&2
    exit 1
fi

# Create necessary directories
mkdir -p "$CONFIG_DIR" "$LOG_DIR" "$THREADS_DIR" "$THREAT_FEEDS_DIR" "$SURICATA_RULES_DIR"

# Initialize logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_DIR/freeutm.log"
}

# Acquire lock to prevent multiple instances
acquire_lock() {
    exec 200>$LOCK_FILE
    flock -n 200 || {
        log "Another instance is already running. Exiting."
        exit 1
    }
    echo $$ >&200
}

release_lock() {
    flock -u 200
    rm -f $LOCK_FILE
}

# Email notification function
send_alert() {
    local subject=$1
    local message=$2
    if [ -f "$CONFIG_DIR/email.conf" ]; then
        source "$CONFIG_DIR/email.conf"
        echo "$message" | mail -s "$subject" "$ALERT_EMAIL"
    else
        log "Email alert not configured. Create $CONFIG_DIR/email.conf with ALERT_EMAIL variable."
    fi
}

# =============================================
# Thread Management Functions
# =============================================

add_thread() {
    local url=$1
    local thread_id=$(echo "$url" | md5sum | cut -d' ' -f1)
    
    if [ -z "$url" ]; then
        log "Error: No URL provided for thread"
        return 1
    fi

    # Validate URL format
    if [[ ! "$url" =~ ^https?:// ]]; then
        log "Error: Invalid URL format. Must start with http:// or https://"
        return 1
    fi

    # Check if thread already exists
    if [ -f "$THREADS_DIR/$thread_id" ]; then
        log "Thread already exists: $url"
        return 1
    fi

    # Create thread file
    echo "$url" > "$THREADS_DIR/$thread_id"
    log "Added new thread: $url (ID: $thread_id)"
    
    # Add to monitoring cron job
    add_thread_monitoring "$thread_id" "$url"
}

list_threads() {
    log "Current monitored threads:"
    if [ -z "$(ls -A $THREADS_DIR)" ]; then
        log "No threads currently being monitored"
    else
        for thread_file in "$THREADS_DIR"/*; do
            local url=$(cat "$thread_file")
            local thread_id=$(basename "$thread_file")
            log "ID: $thread_id - URL: $url"
        done
    fi
}


manage_fail2ban() {
    # Check if Fail2Ban is installed
    if ! command -v fail2ban-client >/dev/null; then
        log "Fail2Ban not installed. Installing..."
        apt-get install -y fail2ban
        if [ $? -ne 0 ]; then
            log "Failed to install Fail2Ban"
            return 1
        fi
        # Create local jail configuration
        cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
    fi

    case $1 in
        --start|--stop|--restart|--reload|--status)
            local action=$(echo "$1" | sed 's/^--//')
            systemctl $action fail2ban
            log "Fail2Ban service $action"
            ;;
            
        --enable|--disable)
            local action=$(echo "$1" | sed 's/^--//')
            systemctl $action fail2ban
            log "Fail2Ban service $action at boot"
            ;;
            
        --ban-ip)
            if [ -z "$2" ]; then
                log "IP address required for ban"
                return 1
            fi
            fail2ban-client set sshd banip "$2"
            log "Manually banned IP: $2"
            ;;
            
        --unban-ip)
            if [ -z "$2" ]; then
                log "IP address required for unban"
                return 1
            fi
            fail2ban-client set sshd unbanip "$2"
            log "Manually unbanned IP: $2"
            ;;
            
        --add-jail)
            if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
                log "Jail name, service and filter required"
                return 1
            fi
            local jail_name=$2
            local service=$3
            local filter=$4
            
            # Create jail configuration
            cat >> /etc/fail2ban/jail.local <<EOF

[$jail_name]
enabled  = true
port     = $service
filter   = $filter
logpath  = /var/log/$service.log
maxretry = 3
bantime  = 3600
findtime = 600
EOF
            
            systemctl restart fail2ban
            log "Added new Fail2Ban jail for $service using $filter filter"
            ;;
            
        --list-banned)
            fail2ban-client status
            echo ""
            fail2ban-client status sshd | grep "Banned IP list"
            ;;
            
        --config-test)
            fail2ban-client --test
            if [ $? -eq 0 ]; then
                log "Fail2Ban configuration test successful"
            else
                log "Fail2Ban configuration test failed"
                return 1
            fi
            ;;
            
        *)
            log "Invalid Fail2Ban option"
            return 1
            ;;
    esac
}



remove_thread() {
    local thread_id=$1
    
    if [ -z "$thread_id" ]; then
        log "Error: No thread ID provided"
        return 1
    fi

    if [ ! -f "$THREADS_DIR/$thread_id" ]; then
        log "Error: Thread ID not found: $thread_id"
        return 1
    fi

    local url=$(cat "$THREADS_DIR/$thread_id")
    rm -f "$THREADS_DIR/$thread_id"
    
    # Remove from monitoring cron job
    remove_thread_monitoring "$thread_id"
    
    log "Removed thread: $url (ID: $thread_id)"
}

add_thread_monitoring() {
    local thread_id=$1
    local url=$2
    
    # Create monitoring script
    local monitor_script="$THREADS_DIR/monitor_$thread_id.sh"
    
    cat > "$monitor_script" <<EOF
#!/bin/bash
# Monitor script for thread $thread_id
# Auto-generated by freeutm

URL="$url"
LOG_FILE="$LOG_DIR/thread_${thread_id}.log"
ALERT_FILE="$CONFIG_DIR/email.conf"

response=\$(curl -s -o /dev/null -w "%{http_code}" "\$URL")

if [ "\$response" -ne 200 ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Thread alert: \$URL returned status \$response" >> "\$LOG_FILE"
    
    if [ -f "\$ALERT_FILE" ]; then
        source "\$ALERT_FILE"
        echo "Thread alert: \$URL returned status \$response" | mail -s "Thread Alert: \$URL" "\$ALERT_EMAIL"
    fi
fi
EOF

    chmod +x "$monitor_script"
    
    # Add to crontab (check every 5 minutes)
    (crontab -l 2>/dev/null; echo "*/5 * * * * $monitor_script") | crontab -
    
    log "Added monitoring for thread $thread_id"
}

remove_thread_monitoring() {
    local thread_id=$1
    
    # Remove monitor script
    rm -f "$THREADS_DIR/monitor_$thread_id.sh"
    
    # Remove from crontab
    crontab -l | grep -v "monitor_$thread_id.sh" | crontab -
    
    log "Removed monitoring for thread $thread_id"
}

# =============================================
# Scanning Functions
# =============================================

update_antivirus() {
    log "Updating antivirus databases..."
    
    if [ "$1" == "--clamav" ] || [ "$1" == "--full" ]; then
        if command -v freshclam >/dev/null; then
            systemctl stop clamav-freshclam
            freshclam
            systemctl start clamav-freshclam
            log "ClamAV databases updated"
        else
            log "ClamAV not installed. Install with: apt install clamav"
        fi
    fi
    
    if [ "$1" == "--maldet" ] || [ "$1" == "--full" ]; then
        if command -v maldet >/dev/null; then
            maldet -u
            log "Maldet databases updated"
        else
            log "Maldet not installed. Install from: https://www.rfxn.com/projects/linux-malware-detect/"
        fi
    fi
    
    if [ "$1" == "--rkhunter" ] || [ "$1" == "--full" ]; then
        if command -v rkhunter >/dev/null; then
            rkhunter --update
            log "RKHunter databases updated"
        else
            log "RKHunter not installed. Install with: apt install rkhunter"
        fi
    fi
    
    if [ "$1" == "--yara" ] || [ "$1" == "--full" ]; then
        if command -v yara >/dev/null; then
            # Update YARA rules from repositories
            if [ -d "/etc/yara-rules" ]; then
                cd /etc/yara-rules && git pull
                log "YARA rules updated"
            else
                log "YARA rules directory not found. Consider installing rules."
            fi
        else
            log "YARA not installed. Install with: apt install yara"
        fi
    fi
}

run_scan() {
    case $1 in
        --clamav)
            log "Running ClamAV scan..."
            if command -v clamscan >/dev/null; then
                clamscan --remove --infected --recursive --verbose / > "$LOG_DIR/clamav_scan.log" 2>&1
                send_alert "ClamAV Scan Results" "$(tail -n 20 "$LOG_DIR/clamav_scan.log")"
                log "ClamAV scan completed. Results in $LOG_DIR/clamav_scan.log"
            else
                log "ClamAV not installed"
            fi
            ;;
        --maldet)
            log "Running Maldet scan..."
            if command -v maldet >/dev/null; then
                maldet -a / > "$LOG_DIR/maldet_scan.log" 2>&1
                send_alert "Maldet Scan Results" "$(tail -n 20 "$LOG_DIR/maldet_scan.log")"
                log "Maldet scan completed. Results in $LOG_DIR/maldet_scan.log"
            else
                log "Maldet not installed"
            fi
            ;;
        --rkhunter)
            log "Running RKHunter scan..."
            if command -v rkhunter >/dev/null; then
                rkhunter --check --skip-keypress > "$LOG_DIR/rkhunter_scan.log" 2>&1
                send_alert "RKHunter Scan Results" "$(grep -i warning "$LOG_DIR/rkhunter_scan.log")"
                log "RKHunter scan completed. Results in $LOG_DIR/rkhunter_scan.log"
            else
                log "RKHunter not installed"
            fi
            ;;
        --yara)
            log "Running YARA scan..."
            if command -v yara >/dev/null; then
                if [ -d "/etc/yara-rules" ]; then
                    find / -type f -exec yara -r /etc/yara-rules/index.yar {} + > "$LOG_DIR/yara_scan.log" 2>&1
                    send_alert "YARA Scan Results" "$(grep -i "match" "$LOG_DIR/yara_scan.log")"
                    log "YARA scan completed. Results in $LOG_DIR/yara_scan.log"
                else
                    log "YARA rules directory not found"
                fi
            else
                log "YARA not installed"
            fi
            ;;
        --full)
            log "Running full system scan..."
            run_scan --clamav
            run_scan --maldet
            run_scan --rkhunter
            run_scan --yara
            log "Full system scan completed"
            ;;
        *)
            log "Invalid scan option"
            return 1
            ;;
    esac
}

# =============================================
# IDS/IPS Functions
# =============================================

manage_suricata() {
    case $1 in
        --start)
            if ! command -v suricata >/dev/null; then
                log "Suricata not installed. Install with: apt install suricata"
                return 1
            fi
            
            local interface=$(ip -o -4 route show to default | awk '{print $5}')
            if [ -z "$interface" ]; then
                log "Could not determine network interface"
                return 1
            fi
            
            # Check if Suricata is already running
            if pgrep -x "suricata" >/dev/null; then
                log "Suricata is already running"
                return 0
            fi
            
            # Start Suricata
            suricata -c /etc/suricata/suricata.yaml -i $interface -D
            if [ $? -eq 0 ]; then
                log "Suricata started on interface $interface"
            else
                log "Failed to start Suricata"
                return 1
            fi
            ;;
        --active-log)
            if [ ! -f "/var/log/suricata/fast.log" ]; then
                log "Suricata log file not found. Is Suricata running?"
                return 1
            fi
            tail -f /var/log/suricata/fast.log
            ;;
        --update)
            if ! command -v suricata-update >/dev/null; then
                log "suricata-update not found. Install Suricata first."
                return 1
            fi
            
            suricata-update
            if [ $? -eq 0 ]; then
                log "Suricata rules updated"
                
                # Reload Suricata if running
                if pgrep -x "suricata" >/dev/null; then
                    kill -USR2 $(pidof suricata)
                    log "Suricata rules reloaded"
                fi
            else
                log "Failed to update Suricata rules"
                return 1
            fi
            ;;
        --ips-mode)
            # Enable IPS mode by enabling NFQUEUE
            if ! grep -q "nfqueue" /etc/suricata/suricata.yaml; then
                sed -i '/^ *- detect-protocols:/a \    - af-packet\n    - nfqueue' /etc/suricata/suricata.yaml
                log "NFQUEUE enabled in Suricata configuration"
                
                # Restart Suricata if running
                if pgrep -x "suricata" >/dev/null; then
                    pkill -9 suricata
                    manage_suricata --start
                fi
                
                # Configure iptables to send traffic to NFQUEUE
                iptables -I INPUT -j NFQUEUE --queue-bypass
                iptables -I OUTPUT -j NFQUEUE --queue-bypass
                iptables -I FORWARD -j NFQUEUE --queue-bypass
                log "IPTables configured for IPS mode"
            else
                log "Suricata already configured for IPS mode"
            fi
            ;;
        --add-rule)
            if [ -z "$2" ]; then
                log "No rule provided to add"
                return 1
            fi
            
            # Validate rule syntax
            if ! echo "$2" | grep -qE '^alert\s+'; then
                log "Invalid Suricata rule format. Must start with 'alert'"
                return 1
            fi
            
            # Add rule to local rules file
            echo "$2" >> "$SURICATA_RULES_DIR/local.rules"
            
            # Reload rules if Suricata is running
            if pgrep -x "suricata" >/dev/null; then
                kill -USR2 $(pidof suricata)
                log "Added rule to Suricata and reloaded rules: $2"
            else
                log "Added rule to Suricata (service not running): $2"
            fi
            ;;
        *)
            log "Invalid Suricata action"
            return 1
            ;;
    esac
}

run_vuln_check() {
    log "Running vulnerability check..."
    
    # Check for Lynis
    if command -v lynis >/dev/null; then
        lynis audit system > "$LOG_DIR/lynis_scan.log" 2>&1
        send_alert "Lynis Vulnerability Scan Results" "$(grep -i warning "$LOG_DIR/lynis_scan.log")"
        log "Lynis scan completed. Results in $LOG_DIR/lynis_scan.log"
    else
        log "Lynis not installed. Install with: apt install lynis"
    fi
    
    # Check for OpenVAS/GVM
    if command -v gvm-cli >/dev/null; then
        log "OpenVAS/GVM found. Running vulnerability scan..."
        gvm-cli --gmp-username admin --gmp-password admin socket --xml "<get_tasks/>" > "$LOG_DIR/openvas_scan.log"
        log "OpenVAS/GVM scan initiated. Check web interface for results."
    fi
    
    # Check for chkrootkit
    if command -v chkrootkit >/dev/null; then
        chkrootkit > "$LOG_DIR/chkrootkit.log" 2>&1
        send_alert "chkrootkit Results" "$(grep -i infected "$LOG_DIR/chkrootkit.log")"
        log "chkrootkit scan completed. Results in $LOG_DIR/chkrootkit.log"
    fi
    
    log "Vulnerability check completed"
}

manage_service() {
    local service=$1
    local action=$2
    
    if [ -z "$service" ] || [ -z "$action" ]; then
        log "Service name and action required"
        return 1
    fi
    
    case $action in
        --start|--stop|--restart|--status)
            local cmd=$(echo "$action" | sed 's/^--//')
            systemctl $cmd $service
            log "Service $service $cmd attempted"
            ;;
        *)
            log "Invalid service action: $action"
            return 1
            ;;
    esac
}

# =============================================
# Firewall Functions
# =============================================

manage_firewall() {
    # Check if UFW is installed
    if ! command -v ufw >/dev/null; then
        log "UFW not installed. Install with: apt install ufw"
        return 1
    fi
    
    case $1 in
        --add-rule)
            if [ "$2" == "--port" ]; then
                local port=$3
                local protocol=$5
                
                if [ -z "$port" ] || [ -z "$protocol" ]; then
                    log "Missing port or protocol for firewall rule"
                    return 1
                fi
                
                # Validate port number
                if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
                    log "Invalid port number: $port"
                    return 1
                fi
                
                # Validate protocol
                if ! [[ "$protocol" =~ ^(tcp|udp)$ ]]; then
                    log "Invalid protocol: $protocol (must be tcp or udp)"
                    return 1
                fi
                
                ufw allow $port/$protocol
                log "Added firewall rule for $protocol port $port"
                
            elif [ "$2" == "--service" ]; then
                local service=$3
                
                if [ -z "$service" ]; then
                    log "Missing service name for firewall rule"
                    return 1
                fi
                
                # Check if service exists in /etc/services
                if ! grep -q "^$service" /etc/services; then
                    log "Service not found in /etc/services: $service"
                    return 1
                fi
                
                ufw allow $service
                log "Added firewall rule for service $service"
            else
                log "Invalid add-rule option"
                return 1
            fi
            ;;
        --panic-mode)
            if [ "$2" == "--on" ]; then
                ufw enable
                ufw default deny incoming
                ufw default deny outgoing
                log "Firewall panic mode activated - all traffic blocked"
            elif [ "$2" == "--off" ]; then
                ufw default allow outgoing
                ufw default deny incoming
                log "Firewall panic mode deactivated"
            else
                log "Invalid panic-mode option"
                return 1
            fi
            ;;
        *)
            log "Invalid firewall action"
            return 1
            ;;
    esac
}

# =============================================
# Main Help Function
# =============================================

show_help() {
    cat << EOF
freeutm v$VERSION - Unified Threat Management for Linux

Usage: ./freeutm [OPTIONS]

Scan Options:
  --help                      Show this help message
  --scan --clamav             Run ClamAV scan
  --scan --maldet             Run Maldet scan
  --scan --rkhunter           Run RKHunter scan
  --scan --yara               Run YARA scan
  --scan --full               Run full system scan (all scanners)
  --scan --update             Update all scanning databases

IDS/IPS Options:
  --ids --suricata --start        Start Suricata IDS
  --ids --suricata --active-log   Show Suricata active log
  --ids --suricata --update       Update Suricata rules
  --ids --suricata --ips-mode     Configure Suricata in IPS mode
  --ids --suricata --add-rule     Add custom rule to Suricata (provide rule as argument)
  --ids --vulcheck                Run vulnerability check
  --ids --service <service_name> --start/--stop/--restart  Manage services

Firewall Options:
  --fw --add-rule --port <port> --protocol <proto>  Add port-based rule
  --fw --add-rule --service <service_name>          Add service-based rule
  --fw --panic-mode --on/--off                      Enable/disable panic mode

Thread Management Options:
  --add --threads <url>        Add a new URL to thread monitoring
  --list --threads             List all monitored threads
  --remove --threads <id>      Remove a thread from monitoring

Fail2Ban Options:
  --fail2ban --start/--stop/--restart    Manage Fail2Ban service
  --fail2ban --enable/--disable          Enable/disable at boot
  --fail2ban --ban-ip <IP>               Manually ban an IP
  --fail2ban --unban-ip <IP>             Manually unban an IP
  --fail2ban --add-jail <name> <service> <filter>  Add custom jail
  --fail2ban --list-banned               List all banned IPs
  --fail2ban --config-test               Test configuration


Examples:
  ./freeutm --scan --clamav
  ./freeutm --scan --full
  ./freeutm --ids --suricata --start
  ./freeutm --ids --suricata --add-rule 'alert tcp any any -> any any (msg:"Test Rule"; sid:1000001;)'
  ./freeutm --fw --add-rule --port 22 --protocol tcp
  ./freeutm --fw --panic-mode --on
  ./freeutm --add --threads "https://example.com"
  ./freeutm --list --threads
  ./freeutm --remove --threads <thread_id>
  ./freeutm --fail2ban --start
  ./freeutm --fail2ban --ban-ip 192.168.1.100
  ./freeutm --fail2ban --add-jail nginx-auth nginx nginx-http-auth
  ./freeutm --fail2ban --list-banned
EOF
}

# =============================================
# Main Execution
# =============================================

acquire_lock

case $1 in
    --help)
        show_help
        ;;
    --scan)
        case $2 in
            --update)
                update_antivirus --full
                ;;
            *)
                run_scan $2
                ;;
        esac
        ;;
    --ids)
        case $2 in
            --suricata)
                manage_suricata $3 "$4"
                ;;
            --vulcheck)
                run_vuln_check
                ;;
            --service)
                if [ $# -ge 4 ]; then
                    manage_service $3 $4
                else
                    log "Invalid service command"
                    show_help
                fi
                ;;
            *)
                log "Invalid IDS option"
                show_help
                ;;
        esac
        ;;

    --fail2ban)
        manage_fail2ban $2 $3 $4 $5
        ;;
        
    *)
        log "Invalid option: $1"
        show_help
        ;;


    esac 
    --fw)
        manage_firewall $2 $3 $4 $5 $6
        ;;
    --add)
        case $2 in
            --threads)
                add_thread "$3"
                ;;
            *)
                log "Invalid add option"
                show_help
                ;;
        esac
        ;;
    --list)
        case $2 in
            --threads)
                list_threads
                ;;
            *)
                log "Invalid list option"
                show_help
                ;;
        esac
        ;;

    
    --remove)
        case $2 in
            --threads)
                remove_thread "$3"
                ;;
            *)
                log "Invalid remove option"
                show_help
                ;;
        esac
        ;;
    *)
        log "Invalid option: $1"
        show_help
        ;;
esac

release_lock
exit 0